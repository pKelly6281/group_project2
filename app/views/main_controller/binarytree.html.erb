<% provide(:title, "Binary Tree")%>
<% provide(:imageName, "Binary_tree.svg.png")%>
<% provide(:imageLink, "http://en.wikipedia.org/wiki/Binary_tree#mediaviewer/File:Binary_tree.svg")%>
<% provide(:imageAlt, "Binary Tree Data Structure")%>

<h1>Binary Tree Data Structure</h1>
<p>
In computer science, a binary tree is a tree data structure in which each node has at most two children, which are referred to as the left child and the right child. A recursive definition using just set theory notions is that a (non-empty) binary tree is a triple (L, S, R), where L and R are binary trees or the empty set and S is a singleton set.[1] Some authors allow the binary tree to be the empty set as well.[2]

From a graph theory perspective, binary (and K-ary) trees as defined here are actually arborescences.[3] A binary tree may thus be also called a bifurcating arborescence[3]â€”a term which actually appears in some very old programming books,[4] before the modern computer science terminology prevailed. It is also possible to interpret a binary tree as an undirected, rather than a directed graph, in which case a binary tree is an ordered, rooted tree.[5] Some authors use rooted binary tree instead of binary tree to emphasize the fact that the tree is rooted, but as defined above, a binary tree is always rooted.[6] A binary tree is a special case of an ordered K-ary tree, where k is 2. There is however a subtle difference between the binary tree data structure as defined here and the notions from graph theory or as K-ary tree is usually defined. As defined here, a binary tree node having a left child but no right child is not the same as a node having a right child but no left child, whereas an ordered/plane tree (or arborescence) from graph theory cannot tell these cases apart, and neither does k-ary as usually understood as using a list of children.[7] An actual generalization of binary tree would have to discern for example a case like having a first and third, but no second child; the trie data structure is actually the more appropriate generalization in this respect.[8]

In computing, binary trees are seldom used solely for their structure. Much more typical is to define a labeling function on the nodes, which associates some value to each node.[9] Binary trees labelled this way are used to implement binary search trees and binary heaps, and are used for efficient searching and sorting. The designation of non-root nodes as left or right child even when there is only one child present matters in some of these applications, in particular it is significant in binary search trees.[10] In mathematics, what is termed binary tree can vary significantly from author to author. Some use the definition commonly used computer science,[11] but others define it as every non-leaf having exactly two children and don't necessarily order (as left/right) the children either.[12]
</p>
